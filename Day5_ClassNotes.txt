class Parent{
    public void methodOne(){
        System.out.println("we are in methodOne of  Parent class");
    }
    public void display(){
        System.out.println("we are i display method of  Parent class");
    }
    
    public static void greet(){
        System.out.println("we are in static method Of Parent ");
    }
    
    void methodThree(){
         System.out.println("we are in  methodThree of  Parent class");
    }
    
    public Object sayHello(){
        return "hello from parent";
    }
}
class Child extends Parent{
     public void methodTwo(){
        System.out.println("we are in methodTwo  of  Child class");
    }
     @Override
    public void methodOne(){//override method
        System.out.println("we are in method One of child class overriden of Parent");
        super.methodOne();
    }
    @Override
    protected void methodThree(){
         System.out.println("we are in methodThree of Child Class overriden of Parent");
    }
    @Override
    public String sayHello(){//co-variant return type in methodOverriding. from Super class to subclass
        return "Hello From the Child";
        
    }
    
    @Override
    public static void greet(){
        System.out.println("we are in static method Of Child class from Parent ");
    }
    
    

   public static void main(String args[]){
        Child cobj = new Child();
        
       cobj.methodTwo();
       cobj.methodOne();
       cobj.methodThree();
       String msg =cobj.sayHello();

      System.out.println(msg);
      
      //super.methodOne(); invalid
       
}
}
==========================

class Parent{
    public void methodOne(){
        System.out.println("we are in methodOne of  Parent class");
    }
    public void display(){
        System.out.println("we are i display method of  Parent class");
    }
}
class Child extends Parent{
     public void methodTwo(){
        System.out.println("we are in methodTwo  of  Child class");
    }
     @Override
    public void methodOne(){//override method
        System.out.println("we are in method One of child class overriden of Parent");
    }
    public static void main(String args[]){
        // Child  cobj = new Child(); // cobj.methodOne();
        //super class reference varaible holding its child class Object
        //execution first check the method reference in parent then it will be overriden in 
        //child class then child class method executed ,if reference not exist in Parent
        //then it will throw the exception.
        Parent pobj = new Child(); //polymorphism 
        pobj.methodOne();
        //pobj.methodTwo();
        pobj.display();
    }
   
}
    

session1:
===========
1)
import java.util.Scanner;

class Customer{
    int amountSpent;
    Customer(int amountSpent){
        this.amountSpent=amountSpent;
    }
    
    public int calculateLoyaltyPoints(){
        return  this.amountSpent/10;
    }
}

class PremiumCustomer extends Customer{
    int amountSpent;
    PremiumCustomer(int amountSpent){
        super(amountSpent);
        this.amountSpent=amountSpent;
    }
    
    public int calculateLoyaltyPoints(){
        return 2*(this.amountSpent/10);
    }
    
}

class Main{
    
    public static void main(String args[]){
        Scanner sc= new Scanner(System.in);
        
        int amount=sc.nextInt();
        String cType = sc.next();
         
         Customer cobj=null;  
      
        if(cType.equals("yes")){
            cobj = new PremiumCustomer(amount);
            int res = cobj.calculateLoyaltyPoints(amount);
            System.out.println(res);
        }else{
            cobj = new Customer(amount);
            int res1 = cobj.calculateLoyaltyPoints(amount);
            System.out.println(res1);
        }
        
    }
}
============================================
// You are using Java
class First{
    First(int x){ //default constructor
        System.out.println("We are  in default construtor of Frist Class");
    }
}
class Second extends First{
    Second(){
        //by dfault child class constructor implicity  we have code  to call
        //parent class default constructor//super() --->First()
        super(10) //First(int)
        System.out.println("we are in default constructor of Second class(child)");
    }
}
class Main{
    public static void main (String args[]){
        Second sobj = new Second();
    }
}


abstraction:
==============
abstract class First{//for abstract class we cannot create the object 
    
    public void methodOne(){
        System.out.println("we are methodOne");
    }
    
    //abstract method will be implemented in the child class by Override it.
    public abstract void methodTwo();
}

class Test extends First{
    @Override
    public void methodTwo(){
        System.out.println("we are in test class implmented abstract method");
    }
    
    public static void main(String args[]){
        Test fobj = new Test();
        fobj.methodOne();
        fobj.methodTwo();
        
        First f1 = new Test();
        f1.methodOne();
        f1.methodTwo();
        
        
    }
}



session2:
=========
import java.util.Scanner;
abstract class MatrixOperation {
// You are using Java
public abstract int[][] performOperation(int[][] m1,int[][]m2);
    
}

class MatrixAddition extends MatrixOperation{
    @Override
    public int[][] performOperation(int[][] m1,int[][]m2)
   {
     int newArray[][] = new int[m1.length][m2.length];
     
     for (int i=0;i<m1.length;i++){
         for(int j=0;j<m2.length;j++){
             newArray[i][j]= m1[i][j] + m2[i][j];
         }
     }
      
      return newArray; 
   }
}
class Main{
    
    public static void inputMatrix(int[][] mtr1,Scanner sc){
        
        for(int i=0;i<mtr1.length;i++){
            for(int  j=0;j<mtr1.length;j++){
              
              mtr1[i][j]=sc.nextInt();   
                
            }
        }
    }
    public static void displayMatrix(int[][] mtr1){
        
        for(int i=0;i<mtr1.length;i++){
            for(int  j=0;j<mtr1.length;j++){
              
             System.out.print(mtr1[i][j]);  
                
            }
            System.out.println();
        }
        
    }
    

     public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[][] matrix1 = new int[n][n];
        int[][] matrix2 = new int[n][n];
        inputMatrix(matrix1, scanner);
        inputMatrix(matrix2, scanner);

        MatrixOperation addition = new MatrixAddition();
        int[][] resultAddition = addition.performOperation(matrix1, matrix2);

        displayMatrix(resultAddition);

        scanner.close();
    }
}

===============
interfaces:
===========
interface Payment{
    public abstract void paymentProcess(double amount);
}

class CreditCardPayment implements Payment{
    
    @Override
    public void paymentProcess(double amount){
        System.out.println(amount +"paid using the CreditCardP");
    }
}

class PhonePay implements Payment{
    @Override
    public void paymentProcess(double amount){
        System.out.println(amount+" apid using the phonePay UPI");
    }
    
}

class Main{
    
    public static void main(String args[]){
        System.out.println("First way object creation");
       PhonePay py = new PhonePay();
       py.paymentProcess(40000);
       
       CreditCardPayment ccp = new CreditCardPayment();
       ccp.paymentProcess(10000);
        System.out.println("Second way object creation");
       //interface reference variables holding its implementation class Object
       //Interface refr = new ClassName();
       Payment  p = new PhonePay();
       p.paymentProcess(50000);
       
       Payment  p2= new CreditCardPayment();
       p2.paymentProcess(30000);
       
       
        
    } 

}

2)
interface First{
    public abstract void methodOne();
    public abstract String getMessage();
}

interface Second{
    public abstract void methodTwo();
    public abstract String sayHello();

}
//multiple inheritance -> we can acheive by implementing multiple interfaces in java.
class Test implements First,Second{
    @Override
    public void methodOne(){
        System.out.println("we are in methodOne");
    }
    
    @Override
    public String getMessage(){
        return "working with interfaces";
    }
    
    @Override
    public void methodTwo(){
        System.out.println("we are in the methodTwo");
    }
    
    public String sayHello(){
        return "Hello hi...";
    }
    
    
}


class Main{
    
    public static void main(String args[]){
        Test tobj = new Test();
        System.out.println(tobj.getMessage());
        tobj.methodOne();
        tobj.methodTwo();
        System.out.println(tobj.sayHello());
        
        
        
    }
    
    
    
}


Case 3:
========
interface A{
    public abstract void methodOne();
}

interface B extends A{
    public abstract void methodTwo();
    public abstract void methodOne();
}

class C implements B{
    
    @Override
    public void methodOne(){
        System.out.println("we are in the methodOne");
    }
    @Override
    public void methodTwo(){
        System.out.println("We are in the methodTwo");
    }

   public static void main(String args[]){
       B b = new C();
       b.methodTwo();
       b.methodOne();
   }

}

Case 4:
=======
interface A{
    public abstract void methodOne();
}
class B{
    public void methodTwo(){
        System.out.println("We are in the methodTwo of class B");
    }
}
//multiple inheritance  -> we can achieve by extends and implementing the interfaces
class C extends B implements A{
    
    @Override
    public void methodOne(){
        System.out.println("we are in methodOne C implementation class");
    }
  
     public static void main(String args[]){
         C obj = new C();
         obj.methodTwo();
         obj.methodOne();
     }
}


==================


Session:3:
==========
// You are using Java
import java.util.Scanner;

// Interface declaration
interface Growing {
    boolean isGrowing();
}

// Class to check growing number
class GrowingNumber implements Growing {
    private int number;

    public GrowingNumber(int number) {
        this.number = number;
    }

    @Override
    public boolean isGrowing() {
        int prevDigit = 10; // Greater than any digit

        while (number > 0) {
            int currentDigit = number % 10;
            number /= 10;

            if (currentDigit >= prevDigit) {
                return false;
            }
            prevDigit = currentDigit;
        }

        return true;
    }
}


class GrowingString implements Growing {
    private String str;

    public GrowingString(String str) {
        this.str = str.toUpperCase(); 
    }

    @Override
    public boolean isGrowing() {
        for (int i = 1; i < str.length(); i++) {
            if (str.charAt(i) <= str.charAt(i - 1)) {
                return false;
            }
        }
        return true;
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Read input
       // String[] input = scanner.nextLine().split(" ");

        int number = sc.nextInt();
        String word = sc.next();


        // Check growing number
        GrowingNumber gn = new GrowingNumber(number);
        if (gn.isGrowing()) {
            System.out.println("Growing number");
        } else {
            System.out.println("Not growing number");
        }

        GrowingString gs = new GrowingString(word);
        if (gs.isGrowing()) {
            System.out.println("Growing string");
        } else {
            System.out.println("Not growing string");
        }
    }
}
